<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>秋码分享</title><link>/</link><description>Recent content on 秋码分享</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 14 Oct 2023 17:02:17 +0800</lastBuildDate><atom:link href="/rss.xml" rel="self" type="application/rss+xml"/><item><title>端到端的机器学习项目（Machine Learning 研习之六）</title><link>/article/183/</link><pubDate>Sat, 14 Oct 2023 17:02:17 +0800</pubDate><guid>/article/183/</guid><description>&lt;p>Scikit-Learn提供了一些函数，以各种方式将数据集拆分为多个子集。最简单的函数train_test_split()，它的功能与我们前面定义的shuffle_and_split_data ()函数非常相似，只是增加了几个特性。首先，有一个random_state参数，它允许您设置随机生成器种子。其次，您可以向它传递具有相同行数的多个数据集，它将按照相同的索引将它们拆分(这是非常有用的，例如，如果你有一个单独的DataFrame标签)&lt;/p></description></item><item><title>机机器学习的测试和验证（Machine Learning 研习之五）</title><link>/article/182/</link><pubDate>Sun, 27 Aug 2023 16:32:17 +0800</pubDate><guid>/article/182/</guid><description>&lt;p>在此保留验证过程之后，您可以在完整的训练集（包括验证集）上训练最佳模型，这将为您提供最终模型。在这种情况下，需要记住的最重要的规则是，验证集和测试集都必须尽可能具有生产中预期使用的数据的代表性，因此它们应该完全由有代表性的图片组成:您可以对它们进行洗牌，将一半放在验证集中，另一半放在测试集中(确保在这两个集合中都没有重复或接近重复的数据)。在网络图片上对模型进行培训之后，如果您观察到模型在验证集上的性能令人失望，您将不知道这是因为您的模型超出了培训集，还是仅仅是由于网络图片和移动应用程序图片之间的不匹配。&lt;/p></description></item><item><title>机器学习的主要挑战和任务（Machine Learning 研习之四）</title><link>/article/181/</link><pubDate>Sun, 13 Aug 2023 15:12:38 +0800</pubDate><guid>/article/181/</guid><description>&lt;p>对于一个蹒跚学步的孩子来说，要知道什么是苹果，您只需要指着一个苹果说“苹果”(可能会重复这个过程几次)。现在孩子能够识别各种颜色和形状的苹果。&lt;/p></description></item><item><title>对于大量数据集的解决方案便是在线学习或是增量学习（Machine Learning 研习之三）</title><link>/article/180/</link><pubDate>Fri, 28 Jul 2023 21:12:38 +0800</pubDate><guid>/article/180/</guid><description>&lt;p>随着时间的推移，模型也需做出相应的变化。但就采用新数据与旧数据一起训练，势必需要耗费更多的资源，为了解决这一状况，本文带您了解，关于新数据该如何训练？&lt;/p></description></item><item><title>现实生活中机器学习的具体示例（Machine Learning 研习之二）</title><link>/article/179/</link><pubDate>Mon, 17 Jul 2023 21:22:38 +0800</pubDate><guid>/article/179/</guid><description>&lt;p>在上一篇，我们初步了解什么是机器学习，以及它能给我们带来，相对于传统编程解决更为优先、易于维护的一套解决方案。那么，本文将继续为您举例，机器学习给我们生活上带来哪些便捷。&lt;/p></description></item><item><title>让机器学习不再是过门不入，带您一起详解机器学习（机器学习 Machine Learning 研习之一）</title><link>/article/178/</link><pubDate>Sat, 15 Jul 2023 10:18:38 +0800</pubDate><guid>/article/178/</guid><description>&lt;p>让机器学习不再是过门不入，跟着【秋码】一起研习机器学习（Machine Learning），探究什么是机器学习？以及为何我们要去使用机器学习呢？毕竟未来是属于人工智能（Ai）的，引领潮流的往往是新事物，这一次，您可不要再错过了！抓住它，就等于握住了穿梭未来的时光机。&lt;/p></description></item><item><title>把握住golang中的template，方能驾驭得了Hugo主题的template</title><link>/article/177/</link><pubDate>Sat, 08 Jul 2023 15:18:38 +0800</pubDate><guid>/article/177/</guid><description>&lt;p>不置可否，&lt;code>Hugo&lt;/code>的&lt;code>template&lt;/code>同样是使用&lt;code>golang&lt;/code>的标准库&lt;code>html/template&lt;/code>。为了能实现一个属于自己独特的&lt;code>Hugo theme&lt;/code>，或是修改他人的主题，都得对其&lt;code>模板语法&lt;/code>有所知晓，方能改的称心如意，亦或是制作出一套即简约，又不失典雅的&lt;code>Hugo theme&lt;/code>。&lt;/p></description></item><item><title>云服务器到期，站点迁移，Nginx配置SSL以备后续只需！</title><link>/article/176/</link><pubDate>Tue, 20 Jun 2023 20:46:20 +0800</pubDate><guid>/article/176/</guid><description>&lt;p>三年前（2020-06-20 上午11点左右），各大云厂商&lt;code>6.18&lt;/code>活动还在进行中。一番对比下来，最终还是选择了&lt;code>腾讯云&lt;/code>。然而三年的期限，犹如电光火石一般，眨眼间就过去了。可云服务器到期了，却没有了续费的打算，其中缘由说与谁人听呢？&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（内联汇编 [inline assembly]-Solidity之旅十八）</title><link>/article/175/</link><pubDate>Wed, 28 Dec 2022 20:21:06 +0800</pubDate><guid>/article/175/</guid><description>&lt;p>在 Solidity 中使用 &lt;code>Assembly&lt;/code> 的主要好处之一是节省 gas。 让我们尝试通过创建一个将 2 个值 x 和 y 相加并返回结果的函数来比较 Solidity 和 Assembly 之间的 gas 成本。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（库 [library]-Solidity之旅十七）</title><link>/article/174/</link><pubDate>Sat, 24 Dec 2022 21:21:05 +0800</pubDate><guid>/article/174/</guid><description>&lt;p>最后，当库函数成为数据类型本身的一部分时，我们可以在其对象上调用该方法，如我们上面的契约所示，即&lt;code>firstNumber.add(secondNumber);&lt;/code> 。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（Constant 和 Immutable 状态变量-Solidity之旅十六）</title><link>/article/173/</link><pubDate>Fri, 23 Dec 2022 22:04:32 +0800</pubDate><guid>/article/173/</guid><description>&lt;p>编译器生成的合约创建代码将在返回合约之前修改合约的运行时代码，方法是将对不可变量的所有引用替换为分配给它们的值。 如果要将编译器生成的运行时代码与实际存储在区块链中的代码进行比较，则这一点很重要。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（修改器 [modifier]-Solidity之旅十五）</title><link>/article/172/</link><pubDate>Fri, 23 Dec 2022 09:47:58 +0800</pubDate><guid>/article/172/</guid><description>&lt;p>&lt;code>修改器（modifier）&lt;/code>在 Solidity 中是一种特殊类型的函数，用于修改其它函数的行为。例如，开发人员可以使用修改器来检查在允许函数执行之前是否满足某个条件。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（错误处理以及异常-Solidity之旅十四）</title><link>/article/171/</link><pubDate>Wed, 21 Dec 2022 20:42:36 +0800</pubDate><guid>/article/171/</guid><description>&lt;p>它有许多功能来解决在编译时或运行时可能发生的潜在问题。即使语法错误检查发生在编译时，运行时错误也很难捕捉，主要发生在合约执行过程中。一些运行时错误的例子包括除以0的类型错误，数组超出索引错误，等等。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（函数及其可见性和状态可变性-Solidity之旅十三）</title><link>/article/170/</link><pubDate>Mon, 19 Dec 2022 20:30:23 +0800</pubDate><guid>/article/170/</guid><description>&lt;p>对于 public 状态变量会自动生成一个，与状态变量同名的 &lt;code>public&lt;/code>修饰的函数。 以便其他的合约读取他们的值。 当在用一个合约里使用是，外部方式访问 (如: &lt;code>this.x&lt;/code>) 会调用该自动生成的同名函数，而内部方式访问 (如: &lt;code>x&lt;/code>) 会直接从存储中获取值。 Setter函数则不会被生成，所以其他合约&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（事件-Solidity之旅十二）</title><link>/article/169/</link><pubDate>Sun, 18 Dec 2022 20:59:44 +0800</pubDate><guid>/article/169/</guid><description>&lt;p>由于交易日志只存储事件数据而不存储类型。你必须知道事件的类型，包括哪个参数被索引，以及该事件是否是匿名的，以便正确解释数据。 尤其是，有可能使用一个匿名事件来”伪造”另一个事件的签名。由于交易日志只存储事件数据而不存储类型。你必须知道事件的类型，包括哪个参数被索引，以及该事件是否是匿名的，以便正确解释数据。 尤其是，有可能使用一个匿名事件来”伪造”另一个事件的签名。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（OOP-接口-Solidity之旅十一）</title><link>/article/168/</link><pubDate>Sun, 18 Dec 2022 15:44:31 +0800</pubDate><guid>/article/168/</guid><description>&lt;p>我们知道在&lt;code>Java&lt;/code>里&lt;code>接口&lt;/code>是&lt;code>特殊的抽象类&lt;/code>，限制多于&lt;code>抽象类&lt;/code>，但随着&lt;code>Java&lt;/code>版本的更新，&lt;code>Java&lt;/code>中的&lt;code>接口&lt;/code>是越来越趋于&lt;code>抽象类&lt;/code>了（这样说，可能有点不妥，因为&lt;code>接口&lt;/code>本就是&lt;code>特殊的抽象类&lt;/code>，只是&lt;code>接口&lt;/code>中不能有方法具体实现，而&lt;code>抽象类&lt;/code>还是可以有的！然而随着&lt;code>Java&lt;/code>版本的&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（OOP-抽象合约-Solidity之旅十）</title><link>/article/167/</link><pubDate>Sat, 17 Dec 2022 14:59:55 +0800</pubDate><guid>/article/167/</guid><description>&lt;p>即假使合约中至少有一个函数没有实现（没有方法体，只有方法签名的方法），那么便将该合约定义为&lt;code>抽象合约（abstract contract）&lt;/code>。当然咯，前文说到&lt;code>继承&lt;/code>提到的，&lt;code>派生合约&lt;/code>未能给其&lt;code>基合约&lt;/code>的构造函数传递指定参数，这时，该合约便只能声明为&lt;code>抽象&lt;/code>的。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（OOP-合约继承-Solidity之旅九）</title><link>/article/166/</link><pubDate>Fri, 16 Dec 2022 20:15:16 +0800</pubDate><guid>/article/166/</guid><description>&lt;p>创建合约时， 合约的 构造函数 (一个用关键字 &lt;code>constructor&lt;/code> 声明的函数)会执行一次。 构造函数是可选的。只允许有一个构造函数，这意味着不支持&lt;code>重载&lt;/code>。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（流程控制-Solidity之旅八）</title><link>/article/165/</link><pubDate>Wed, 14 Dec 2022 22:21:38 +0800</pubDate><guid>/article/165/</guid><description>&lt;p>今天我们不讲三国，来讲讲 流程控制 关于什么是&lt;code>流程控制&lt;/code>，想来您是知道的吧！可若您确实不晓得，那您看了这篇文或许对&lt;code>流程控制&lt;/code>有了初步的了解。 Solidity 和其他语言一样，支持大部分&lt;code>流程控制&lt;/code>语句，除了&lt;code>switch&lt;/code>和被&lt;code>程序员界&lt;/code>谈虎色变而其他语言又保留的&lt;code>goto&lt;/code>。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（单位以及全局变量-Solidity之旅七）</title><link>/article/164/</link><pubDate>Wed, 14 Dec 2022 09:31:48 +0800</pubDate><guid>/article/164/</guid><description>&lt;p>时间戳和区块哈希在一定程度上都可能受到挖矿矿工影响。例如，挖矿社区中的恶意矿工可以用某个给定的哈希来运行赌场合约的 payout 函数，而如果他们没收到钱，还可以用一个不同的哈希重新尝试。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（基本类型转换以及推断-Solidity之旅六）</title><link>/article/163/</link><pubDate>Mon, 12 Dec 2022 22:08:10 +0800</pubDate><guid>/article/163/</guid><description>&lt;p>某些情况下，编译器不支持&lt;code>隐式转换&lt;/code>，而这时，作为开发人员的您就不得不使用&lt;code>强硬手段&lt;/code>了。&lt;code>显式转换&lt;/code>可能会发生些您无法预料的状况，所以您需要繁琐的测试，看最终是否能达到您的要求。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（变量作用域-Solidity之旅五）</title><link>/article/162/</link><pubDate>Sun, 11 Dec 2022 21:12:12 +0800</pubDate><guid>/article/162/</guid><description>&lt;p>局部变量（Local Variable）的范围仅限于它们被定义的函数，但 状态变量（State Variable） 可以有三种范围。 public - public 修饰的 状态变量（State Variable） 可以在内部以及通过消息进行访问，对于一个公共状态变量，会自动生成一个getter函数。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（类型-映射类型-Solidity之旅四）</title><link>/article/161/</link><pubDate>Sat, 10 Dec 2022 20:49:38 +0800</pubDate><guid>/article/161/</guid><description>&lt;p>说到&lt;code>映射（Mapping）&lt;/code>，有过其它编程语言经验的您，对这是再熟悉不过了。Solidity 中的&lt;code>映射（Mapping）&lt;/code> 与&lt;code>Java&lt;/code>的&lt;code>Map&lt;/code>、&lt;code>Go&lt;/code>里的&lt;code>Map&lt;/code>以及&lt;code>javascript&lt;/code>的&lt;code>JSON&lt;/code>等众多编程语言中的&lt;code>Map&lt;/code>一样，是用来存储一组&lt;code>键（Key）&lt;/code> &lt;code>值（Value）&lt;/code>，可通过&lt;code>键（Key）&lt;/code>来获取对应&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（类型-引用类型-Solidity之旅三）</title><link>/article/160/</link><pubDate>Fri, 09 Dec 2022 20:56:45 +0800</pubDate><guid>/article/160/</guid><description>&lt;p>数组元素可以是任何类型，包括映射或结构体。对类型的限制是映射只能存储在 存储storage 中，并且公开访问函数的参数需要是 ABI 类型。 状态变量标记 &lt;code>public&lt;/code> 的数组，Solidity创建一个 getter函数 。 小标数字索引就是 getter函数 的参数。&lt;/p></description></item><item><title>花了不到1块5，玩了下全网最火的ChatGPT</title><link>/article/159/</link><pubDate>Thu, 08 Dec 2022 20:59:39 +0800</pubDate><guid>/article/159/</guid><description>&lt;p>这一周来，要说 AI 界最为热闹的莫过于 ChatGPT 了。刚推出一周的时间，注册用户竟然达到了 100 万。自 ChatGPT 推出后，不过短短几天，用户如蜂拥般地去注册，把玩这个能在一周左右吸粉 百来万的现下5网红。&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（类型-值类型-Solidity之旅二）</title><link>/article/158/</link><pubDate>Tue, 06 Dec 2022 21:52:25 +0800</pubDate><guid>/article/158/</guid><description>&lt;p>以下这些类型在 Solidity 中都属于 值类型： * 布尔类型（bool）：字面常量值 &lt;code>true&lt;/code>和 &lt;code>false&lt;/code> * 整型（int/uint）：分为有符号整型&lt;code>int&lt;/code>和无符号整形&lt;code>uint&lt;/code>，这一点倒是和 c++、golang很相像。不管是无符号还有符号整数，它们都是以 8 位递增到 256 位，而&lt;code>int&lt;/code>&lt;/p></description></item><item><title>玩以太坊链上项目的必备技能（初识智能合约语言-Solidity之旅一）</title><link>/article/157/</link><pubDate>Mon, 05 Dec 2022 22:34:42 +0800</pubDate><guid>/article/157/</guid><description>&lt;p>Solidity是静态类型的，支持继承、库和复杂的用户定义类型以及其他功能。 使用Solidity，您可以为投票、众筹、盲目拍卖和多签名钱包等用途创建合约。 在部署合约时，你应该使用最新发布的 Solidity 版本。除了特殊情况外，只有最新版本才会收到安全修复。此外，突破性的变化以及新的&lt;/p></description></item><item><title>在构建 Web3 前，需先知道什么是区块链，毕竟 Web3 是基于区块链</title><link>/article/156/</link><pubDate>Thu, 01 Dec 2022 20:30:51 +0800</pubDate><guid>/article/156/</guid><description>&lt;p>通俗来说，&lt;code>区块链&lt;/code>本质上是一个去中心化的数据仓储，也就是每个人都保留着这个账本，可以认为它是一套加密的分布式超级账本。 比特币是基于区块链技术的第一个应用，也是目前最成功的一个应用。&lt;/p></description></item><item><title>Web3 来了，让我们展开双手拥抱它吧！</title><link>/article/155/</link><pubDate>Wed, 30 Nov 2022 20:28:25 +0800</pubDate><guid>/article/155/</guid><description>&lt;p>Web3 以前所未有的方式赋予你数字资产的所有权。 例如，假设您正在玩一个 Web2 游戏。 如果您购买游戏内物品，它会直接与您的帐户绑定。 如果游戏创建者删除您的帐户，您将丢失这些物品。 或者如果您停止玩游戏，您将失去投资到游戏内物品的价值。&lt;/p></description></item><item><title>Go 语言中的 Moduels 管理（Let's Go 三十四）</title><link>/article/154/</link><pubDate>Fri, 11 Nov 2022 21:45:59 +0800</pubDate><guid>/article/154/</guid><description>&lt;p>在 &lt;code>Go 1.11&lt;/code>以前使用包管理一直被开发者所诟病。既然&lt;code>GOPATH&lt;/code>这种包管理引起了一线开发者的一片骂声，所以，&lt;code>Go&lt;/code>官方体恤一线开发者对&lt;code>GOPATH&lt;/code>这种包管理的情绪，一直致力努力提供对一线开发者友好的包管理解决方法而奋斗。从最初的&lt;code>GOPATH&lt;/code>到&lt;/p></description></item><item><title>Go 语言中的包（Let's Go 三十三）</title><link>/article/153/</link><pubDate>Mon, 07 Nov 2022 20:41:53 +0800</pubDate><guid>/article/153/</guid><description>&lt;p>Go语言的包借助了目录树的组织形式，一般包的名称就是其源文件所在目录的名称，虽然Go语言没有强制要求包名必须和其所在的目录名同名，但还是建议包名和所在目录同名，这样结构更清晰。&lt;/p></description></item><item><title>Go 语言中的错误处理（Let's Go 三十二）</title><link>/article/152/</link><pubDate>Thu, 03 Nov 2022 11:10:28 +0000</pubDate><guid>/article/152/</guid><description>&lt;p>除了上面的 errors.New 用法之外，我们还可以实现 error 接口自定义一个 Error() 方法，来返回自定义的错误信息。&lt;/p></description></item><item><title>Go 语言中的带有缓冲 Channel（Let's Go 三十一）</title><link>/article/151/</link><pubDate>Mon, 31 Oct 2022 11:27:56 +0000</pubDate><guid>/article/151/</guid><description>&lt;p>无缓冲信道 Channel 是无法保存任何值的，该类型信道要求 发送 goroutine 和 接受 goroutine 两者同时准备好，这样才能完成发送与接受的操作。&lt;/p></description></item><item><title>Go 语言中的单向 Channel（Let's Go 三十）</title><link>/article/150/</link><pubDate>Sat, 29 Oct 2022 10:53:15 +0000</pubDate><guid>/article/150/</guid><description>&lt;p>通过上篇文章，我们知道该怎么声明信道 Channel，以及发送和读取数据。然而本文要讲的是&lt;code>单向Channel&lt;/code>，可单向信道Channel到底是怎样的呢？&lt;/p></description></item><item><title>Go 语言中的 Channel（Let's Go 二十九）</title><link>/article/149/</link><pubDate>Thu, 27 Oct 2022 12:43:09 +0000</pubDate><guid>/article/149/</guid><description>&lt;p>Channel 是进程内的通信方式，因此通过 channel 传递对象的过程和调用函数时的参数传递行为比较一致，比如也可以传递指针等。如果需要跨进程通信，我们建议用分布式系统的方法来解决，比如使用 Socket 或者 HTTP 等通信协议。Go 语言对于网络方面也有非常完善的支持。&lt;/p></description></item><item><title>Go 语言中的并发编程（Let's Go 二十八）</title><link>/article/148/</link><pubDate>Mon, 24 Oct 2022 11:13:34 +0000</pubDate><guid>/article/148/</guid><description>&lt;p>并发与并行并不相同，并发主要由切换时间片来实现“同时”运行，并行则是直接利用多核实现多线程的运行，Go程序可以设置使用核心数，以发挥多核计算机的能力。&lt;/p></description></item><item><title>Go 语言中的空接口（Let's Go 二十七）</title><link>/article/147/</link><pubDate>Sun, 23 Oct 2022 13:25:50 +0000</pubDate><guid>/article/147/</guid><description>&lt;p>所谓空接口就是没有方法集，以至于任何类型都可实现它，换言之，也就是空接口可以保存任意类型的值。&lt;/p></description></item><item><title>Go 语言中的类型断言（Let's Go 二十六）</title><link>/article/146/</link><pubDate>Sat, 22 Oct 2022 13:26:16 +0000</pubDate><guid>/article/146/</guid><description>&lt;p>如果&lt;code>Type&lt;/code>是具体某个类型，类型断言会检查 &lt;code>varl&lt;/code>的动态类型是否等于具体类型 &lt;code>Type&lt;/code>。如果检查成功，类型断言返回的结果是 &lt;code>varl&lt;/code> 的动态值，其类型是 &lt;code>Type&lt;/code>。 - 如果 &lt;code>Type&lt;/code> 是接口类型，类型断言会检查 &lt;code>varl&lt;/code> 的动态类型是否满足&lt;/p></description></item><item><title>Go 语言中的接口（Let's Go 二十五）</title><link>/article/145/</link><pubDate>Fri, 21 Oct 2022 12:20:28 +0000</pubDate><guid>/article/145/</guid><description>&lt;p>要想实现&lt;code>Go&lt;/code>中的接口，类型实现接口方法集的方法，其类型实现的方法签名必须要与接口中的方法集中方法签名一样。 类型不需要显式声明它实现了某个接口：接口被隐式地实现。多个类型可以实现同一个接口。&lt;/p></description></item><item><title>Go 语言中的方法（Let's Go 二十四）</title><link>/article/144/</link><pubDate>Wed, 19 Oct 2022 13:31:31 +0000</pubDate><guid>/article/144/</guid><description>&lt;p>Go中的方法是一种特殊的函数，以实现类型与函数进行绑定&lt;/p></description></item><item><title>原创 Go 语言中的结构体（Let's Go 二十三）</title><link>/article/143/</link><pubDate>Fri, 14 Oct 2022 13:33:44 +0000</pubDate><guid>/article/143/</guid><description>&lt;p>&lt;code>Go&lt;/code>中的结构体与&lt;code>c/c++&lt;/code>语言中是差不多，然而对没有接触过&lt;code>c/c++&lt;/code>语言的话，对在看到结构体这一&lt;code>复合类型&lt;/code>是新鲜事物。&lt;/p></description></item><item><title>Go 语言中的延迟执行【defer】（Let's Go 二十二）</title><link>/article/142/</link><pubDate>Wed, 12 Oct 2022 12:07:27 +0000</pubDate><guid>/article/142/</guid><description>&lt;p>函数作为另一个函数的形参，这就是Go当中的回调函数。&lt;/p></description></item><item><title>Go 语言中的闭包和可变参数（Let's Go 二十一）</title><link>/article/141/</link><pubDate>Wed, 05 Oct 2022 13:10:40 +0000</pubDate><guid>/article/141/</guid><description>&lt;p>在前面几篇文章，我们一直在使用&lt;code>Println、Printf&lt;/code>函数，你可能没有特别注意到，就是我们可以传入任意参数。而这种可以接受任意实参的函数，函数的形参极有可能是&lt;code>可变参数&lt;/code>，使用&lt;code>...type&lt;/code>可声明&lt;code>可变参数&lt;/code>，但必须是形参列表的最后&lt;/p></description></item><item><title>Go 语言中的函数变量与匿名函数（Let's Go 二十）</title><link>/article/140/</link><pubDate>Tue, 04 Oct 2022 12:50:36 +0000</pubDate><guid>/article/140/</guid><description>&lt;p>一上来乍一看，函数变量？这究竟是什么意思呢？你函数就函数，变量便是变量，这两者搞在一块，到底是几个意思呢？ 其实啊，在&lt;code>Go&lt;/code>当中，&lt;code>函数&lt;/code>也是一种类型，既然是类型，那就可以向其它类型一样，给变量定义类型啊！而这个类型是&lt;code>函数&lt;/code>，所以&lt;code>函数类型&lt;/code>&lt;/p></description></item><item><title>Go 语言中的函数详解（Let's Go 十九）</title><link>/article/139/</link><pubDate>Mon, 03 Oct 2022 11:28:50 +0000</pubDate><guid>/article/139/</guid><description>&lt;p>在前面几篇文章，接触到的最多的是&lt;code>main&lt;/code>函数。&lt;code>Go&lt;/code> 如同&lt;code>c/c++&lt;/code>语言一样，对于声明函数也有属于自己的一套规则。&lt;/p></description></item><item><title>Go 语言中的 goto、break 以及 continue 语句（Let's Go 十八）</title><link>/article/138/</link><pubDate>Sat, 01 Oct 2022 11:29:09 +0000</pubDate><guid>/article/138/</guid><description>&lt;p>在提到关键字&lt;code>goto&lt;/code>，想必很多人都心有余悸吧，毕竟&lt;code>goto&lt;/code>可是编程语言界破坏代码可读性的罪魁祸首啊！以至于像&lt;code>c/c++&lt;/code>或类 c 的编程语言，都将&lt;code>goto&lt;/code>作为保留关键字，不建议使用，但如果你非要使用，谁人可阻止呢？&lt;/p></description></item><item><title>Go 语言中的 switch 结构（Let's Go 十七）</title><link>/article/137/</link><pubDate>Fri, 30 Sep 2022 12:54:56 +0000</pubDate><guid>/article/137/</guid><description>&lt;p>相较于&lt;code>c/c++&lt;/code>等的&lt;code>switch case&lt;/code>，&lt;code>Go&lt;/code>对&lt;code>switch&lt;/code>做了很大改进，&lt;code>case&lt;/code>与&lt;code>case&lt;/code>之间是不需要写上&lt;code>break&lt;/code>，也能跳出当前&lt;code>case&lt;/code>语句，而且，&lt;code>switch&lt;/code>表达式可以是任何类型的噢！&lt;/p></description></item><item><title>Go 语言中的 for 循环结构（Let's Go 十六）</title><link>/article/136/</link><pubDate>Thu, 29 Sep 2022 12:03:10 +0000</pubDate><guid>/article/136/</guid><description>&lt;p>&lt;code>Go&lt;/code>当中只有&lt;code>for&lt;/code>循环结构，可没有像&lt;code>c/c++&lt;/code>语言有&lt;code>while&lt;/code>、&lt;code>do ... while&lt;/code>的。&lt;code>for&lt;/code>循环结构与&lt;code>if&lt;/code>分支结构一样，可以省略&lt;code>()&lt;/code>，左大括号&lt;code>{&lt;/code>必须与&lt;code>for&lt;/code>在同一行。&lt;/p></description></item><item><title>Go 语言中的 if 分支结构（Let's Go 十五）</title><link>/article/135/</link><pubDate>Wed, 28 Sep 2022 22:12:00 +0800</pubDate><guid>/article/135/</guid><description>&lt;p>&lt;code>Go&lt;/code>当中的&lt;code>if&lt;/code>分支与&lt;code>c/c++&lt;/code>大致相同，只是可以省略&lt;code>条件表达式&lt;/code>的小括号&lt;code>()&lt;/code>，真的是，```G哦·``就是要特立独行。&lt;/p></description></item><item><title>Go 语言中的列表（Let's Go 十四）</title><link>/article/134/</link><pubDate>Tue, 27 Sep 2022 14:05:01 +0000</pubDate><guid>/article/134/</guid><description>&lt;p>列表插入函数的返回值会提供一个 *list.Element 结构，这个结构记录着列表元素的值以及与其他节点之间的关系等信息，从列表中删除元素时，需要用到这个结构进行快速删除。&lt;/p></description></item><item><title>Go 语言中的字典【map】（Let's Go 十三）</title><link>/article/133/</link><pubDate>Tue, 27 Sep 2022 12:40:09 +0000</pubDate><guid>/article/133/</guid><description>&lt;p>其实，&lt;code>map&lt;/code>是一对&lt;code>key（键）&lt;/code>与&lt;code>value（值）&lt;/code>对应的无序集合，又称为&lt;code>关联数组&lt;/code>或&lt;code>字典&lt;/code>。&lt;/p></description></item><item><title>Go 语言中的数组（Let's Go 十二）</title><link>/article/132/</link><pubDate>Mon, 26 Sep 2022 12:32:58 +0000</pubDate><guid>/article/132/</guid><description>&lt;p>其实啊，切片就好像一个完整的蛋糕，你用刀切了一小块，而这一块就是从那完整的蛋糕切了下来。&lt;/p></description></item><item><title>Go 语言中的数组（Let's Go 十一）</title><link>/article/131/</link><pubDate>Sun, 25 Sep 2022 12:51:06 +0000</pubDate><guid>/article/131/</guid><description>&lt;p>与&lt;code>c/c++&lt;/code>语言一样，数组的每个元素可以通过&lt;code>索引下标&lt;/code>进行访问，&lt;code>索引下标&lt;/code>是从&lt;code>0&lt;/code>开始到数组长度减去1的位置。&lt;code>内置函数 len()&lt;/code>可以返回数组中元素的个数。&lt;/p></description></item><item><title>Go 语言中的类型定义与类型别名（Let's Go 十）</title><link>/article/130/</link><pubDate>Sun, 25 Sep 2022 11:18:22 +0000</pubDate><guid>/article/130/</guid><description>&lt;p>类型别名顾名思义就是给类型起个别名。就像上学时候，同学间开玩笑，给人以某种特征起了个外号，又或是英语老师给你起个英文名字，不管是外号、小名还是英文名字，最终都是指向你。&lt;/p></description></item><item><title>Go 语言中的指针（Let's Go 九）</title><link>/article/129/</link><pubDate>Sun, 25 Sep 2022 07:34:56 +0000</pubDate><guid>/article/129/</guid><description>&lt;p>&lt;code>*&lt;/code>操作符作为&lt;code>右值&lt;/code>时，意义是&lt;code>取指针的值&lt;/code>，作为&lt;code>左值&lt;/code>时，也就是放在&lt;code>赋值操作符的左边&lt;/code>时，表示 &lt;code>a 指针指向的变量&lt;/code>。其实归纳起来，&lt;code>*&lt;/code>操作符的根本意义就是操作&lt;code>指针指向的变量&lt;/code>。当操作在&lt;code>右值&lt;/code>时，就是&lt;code>取指向变量的值&lt;/code>，当操作&lt;/p></description></item><item><title>Go 语言中的关键字与标识符（Let's Go 八）</title><link>/article/128/</link><pubDate>Sat, 24 Sep 2022 12:34:00 +0000</pubDate><guid>/article/128/</guid><description>&lt;p>标识符是指&lt;code>Go语言&lt;/code>对各种变量、方法、函数等命名时使用的&lt;code>字符序列&lt;/code>，&lt;code>标识符&lt;/code>由若干个&lt;code>字母&lt;/code>、&lt;code>下划线 _ &lt;/code> 、和&lt;code>数字&lt;/code>组成，&lt;code>且第一个字符必须是字母&lt;/code>。通俗的讲就是凡可以自己定义的名称都可以叫做&lt;code>标识符&lt;/code>。&lt;/p></description></item><item><title>Go 语言中的常量定义（Let's Go 七）</title><link>/article/127/</link><pubDate>Sat, 24 Sep 2022 11:34:30 +0000</pubDate><guid>/article/127/</guid><description>&lt;p>&lt;code>Go&lt;/code>中定义常量与&lt;code>C语言&lt;/code>一样，也是使用&lt;code>const&lt;/code>关键字来定义常量的。常量声明语法：&lt;code>const name [typeName] = value&lt;/code>，其中&lt;code>typeName&lt;/code>（类型）可省略！ 常量可以是字符、字符串、布尔值或数值。 常量不能用 &lt;code>:=&lt;/code> 语法声明。&lt;/p></description></item><item><title>Go 语言中的类型转换以及类型推导（Let's Go 六）</title><link>/article/126/</link><pubDate>Sat, 24 Sep 2022 07:50:28 +0000</pubDate><guid>/article/126/</guid><description>&lt;p>在声明一个变量而不指定其类型时（即使用不带类型的 &lt;code>:=&lt;/code> 语法或 &lt;code>var =&lt;/code> 表达式语法），变量的类型由右值推导得出。&lt;/p></description></item><item><title>Go 语言中的字符串（Let's Go 五）</title><link>/article/125/</link><pubDate>Sat, 24 Sep 2022 06:15:40 +0000</pubDate><guid>/article/125/</guid><description>&lt;p>字符串想必是所有编程语言最为基础的类型，当然，Go中也不另外，字符串可根据需要会占用&lt;code>1&lt;/code>到&lt;code>4&lt;/code>个字节内存，由于&lt;code>Go&lt;/code>采用的是&lt;code>UTF-8&lt;/code>字符集编码格式，所以&lt;code>Go&lt;/code>不需要像其他编程语言那样对使用UTF-8字符集的文本进行编码与解码。&lt;/p></description></item><item><title>Go 语言中的多变量同时赋值、匿名变量以及变量作用域（Let's Go 四）</title><link>/article/124/</link><pubDate>Thu, 22 Sep 2022 13:54:28 +0000</pubDate><guid>/article/124/</guid><description>&lt;p>在函数体外声明的变量称之为全局变量，全局变量只需要在一个源文件中定义，就可以在所有源文件中使用，当然，不包含这个全局变量的源文件需要使用“import”关键字引入全局变量所在的源文件之后才能使用这个全局变量。&lt;/p></description></item><item><title>Go 语言中的基本类型以及变量声明与初始化（Let's Go 三）</title><link>/article/123/</link><pubDate>Wed, 21 Sep 2022 13:39:14 +0000</pubDate><guid>/article/123/</guid><description>&lt;p>刚才只是声明了变量，并没有给他赋值，虽然可以只是只声明变量，而后赋值也是可以的。但可以在声明变量是并初始化变量，也就是给变量赋初始值。&lt;/p></description></item><item><title>使用集成开发环境来开发Go项目</title><link>/article/122/</link><pubDate>Tue, 20 Sep 2022 12:59:15 +0000</pubDate><guid>/article/122/</guid><description>&lt;p>工欲善其事，必先利其器。好的集成开发环境（IDE）能让你事倍功半，好了，废话少扯，下来介绍几种能开发Go项目的IDE。&lt;/p></description></item><item><title>window下安装 Go 语言开发包</title><link>/article/121/</link><pubDate>Mon, 19 Sep 2022 15:11:00 +0000</pubDate><guid>/article/121/</guid><description>&lt;p>在window下安装最新Go语言开发包&lt;/p></description></item><item><title>ag-grid 右键单元格动态改变单元格样式</title><link>/article/120/</link><pubDate>Tue, 14 Jun 2022 11:57:17 +0000</pubDate><guid>/article/120/</guid><description>&lt;p>在window下安装最新Go语言开发包自定义单元格单击或右键时，给单元格添加不一样的样式而苦苦搜寻，可找了好久却好像都没有呢？巧了，笔者已经实现了这一看似很简单地功能！&lt;/p></description></item><item><title>自定义vxe-table表头标题文字过多，显示两行多余省略号并给出tooltip</title><link>/article/119/</link><pubDate>Sat, 11 Jun 2022 02:57:48 +0000</pubDate><guid>/article/119/</guid><description>&lt;p>自定义vxe-table表头标题文字过多，显示两行多余省略号并给出tooltip&lt;/p></description></item><item><title>vue vxe-table表格标题根据内容宽度自动换行</title><link>/article/117/</link><pubDate>Thu, 02 Jun 2022 15:58:34 +0000</pubDate><guid>/article/117/</guid><description>&lt;p>表格标题内容过多时，换行显示且多余部分以省略号显示。&lt;/p></description></item><item><title>Chrome扩展程序开发入门（基于 V3）</title><link>/article/113/</link><pubDate>Tue, 08 Mar 2022 06:05:48 +0000</pubDate><guid>/article/113/</guid><description>&lt;p>Chrome扩展指的是通过调用 Chrome 提供的 Chrome API 来扩展浏览器功能的一种组件，工作在浏览器层面，使用 HTML + Javascript 语言开发[*]。比如著名的 Adblock plus。&lt;/p></description></item><item><title>Ubuntu 16.04LTS 安装 redis-6.2.6（源码安装）</title><link>/article/112/</link><pubDate>Mon, 10 Jan 2022 10:26:44 +0000</pubDate><guid>/article/112/</guid><description>&lt;p>Ubuntu 16.04LTS 安装 redis-6.2.6（源码安装）&lt;/p></description></item><item><title>Navicat Premium 12连接Oracle时提示oracle library is not loaded的问题解决</title><link>/article/111/</link><pubDate>Sun, 22 Aug 2021 02:42:26 +0000</pubDate><guid>/article/111/</guid><description>&lt;p>解决Navicat12连接Oracle报oracle library is not loaded的提示问题&lt;/p></description></item><item><title>Git版本控制教程之在Visual Studio Code中如何使用（四）</title><link>/article/109/</link><pubDate>Sat, 24 Jul 2021 07:27:10 +0000</pubDate><guid>/article/109/</guid><description>&lt;p>在前面几篇讲解了git命令行的基本操作后，本篇将持续讲解git在VS code编辑器中是如何工作的？&lt;/p></description></item><item><title>Git版本控制教程之分支（三）</title><link>/article/108/</link><pubDate>Sat, 17 Jul 2021 09:41:13 +0000</pubDate><guid>/article/108/</guid><description>&lt;p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。 在很多版本控制系统中，这是一个略微低效的过程——常常需要完全创建一个源代码目录的副本。对于大项目来说，这样的过程会耗费很多时间。&lt;/p></description></item><item><title>Git版本控制教程之为项目打上标签（二）</title><link>/article/107/</link><pubDate>Sun, 11 Jul 2021 07:14:55 +0000</pubDate><guid>/article/107/</guid><description>&lt;p>git为项目打上标签，例如，可以在项目稳定阶段或测试阶段，都可以打上一个版本号作为标签名。&lt;/p></description></item><item><title>Git版本控制入门教程（一）</title><link>/article/106/</link><pubDate>Sat, 10 Jul 2021 06:52:05 +0000</pubDate><guid>/article/106/</guid><description>&lt;p>重新整理关于git版本控制的操作教程，相信你在看了这篇文章，你会更加清晰的认识git，和熟练的使用git&lt;/p></description></item><item><title>PHP 处理数据为树状结构</title><link>/article/105/</link><pubDate>Sun, 04 Jul 2021 08:27:52 +0000</pubDate><guid>/article/105/</guid><description>&lt;p>PHP处理没有父子级关系的数据为树状结构数据，对二维数组以某个键值相同的分组合并，最终形成树状结构数据&lt;/p></description></item><item><title>BootstrapTable 动态显示/隐藏某一行</title><link>/article/103/</link><pubDate>Sun, 23 May 2021 03:05:04 +0000</pubDate><guid>/article/103/</guid><description>&lt;p>手写实现自动隐藏/显示BootstrapTable表格行&lt;/p></description></item><item><title>xhr模拟表单下载文件</title><link>/article/97/</link><pubDate>Sun, 25 Apr 2021 03:56:09 +0000</pubDate><guid>/article/97/</guid><description>&lt;p>使用javascript原生XHR下载流文件，可进行计时下载，当然也是可以通过from表单进行下载文件的，但页面可能会有跨域问题，索性就在PHP做个桥接处理了。&lt;/p></description></item><item><title>SpringBoot使用FreeMarker模板发送邮件</title><link>/article/96/</link><pubDate>Sat, 17 Apr 2021 13:38:07 +0000</pubDate><guid>/article/96/</guid><description>&lt;p>Springboot2.x结合FreeMarker使用模板定制属于自己的邮件，瞬间是不是觉得很炫酷啊，那还不赶快去试试看啊&lt;/p></description></item><item><title>PHP使用curl上传文件到远程服务器接口</title><link>/article/94/</link><pubDate>Sun, 11 Apr 2021 06:27:44 +0000</pubDate><guid>/article/94/</guid><description>&lt;p>PHP使用CURL上传文件到远程服务接口&lt;/p></description></item><item><title>docker 安装[7.2-fpm-alpine]与nginx-1.13.0-alpine</title><link>/article/93/</link><pubDate>Sun, 11 Apr 2021 03:33:51 +0000</pubDate><guid>/article/93/</guid><description>&lt;p>docker 容器安装php-fpm和nginx&lt;/p></description></item><item><title>Ubuntu 16.04 LTS 安装redis</title><link>/article/92/</link><pubDate>Sun, 28 Mar 2021 08:02:23 +0000</pubDate><guid>/article/92/</guid><description>&lt;p>redis缓存替换为最新版本，所以记录一下安装过程，【秋码记录】redis缓存也做了相应更换，故而微信小程序就没空写了&lt;/p></description></item><item><title>微信小程序电商实战—首页篇（上）</title><link>/article/91/</link><pubDate>Sat, 20 Mar 2021 11:47:53 +0000</pubDate><guid>/article/91/</guid><description>&lt;p>本文将接上一篇，实现首页上半部分，导航滚动与首页轮播图，首页部分分为两篇来讲解&lt;/p></description></item><item><title>微信小程序电商实战—环境搭建篇</title><link>/article/90/</link><pubDate>Sat, 06 Mar 2021 06:55:30 +0000</pubDate><guid>/article/90/</guid><description>&lt;p>微信小程序电商实战之环境搭建篇，首先先去微信公众号—小程序下载微信开发者工具。&lt;/p></description></item><item><title>Fastadmin后台管理之表格行内编辑requireJS加载x-editable.js</title><link>/article/89/</link><pubDate>Sun, 28 Feb 2021 14:12:52 +0000</pubDate><guid>/article/89/</guid><description>&lt;p>由于Fastadmin官方只有安装表格可编辑的插件才有这个功能，但笔者是一个爱折腾的人，所以也就有了本文，requireJS加载BootstrapTable扩展功能，表格可编辑，基于x-editable.js扩展库&lt;/p></description></item><item><title>Centos7 安装配置 PHP7 Nginx 并部署开源后台系统Fasadmin</title><link>/article/88/</link><pubDate>Sun, 21 Feb 2021 03:34:16 +0000</pubDate><guid>/article/88/</guid><description>&lt;p>由于Fastadmin官网文档没有关于Centos7的部署文档，其实与Ubuntu安装部署差不了多少，故而笔者在Centos7部署了Fastadmin。&lt;/p></description></item><item><title>git使用教程之创建本地库并关联远程库（笔记整理篇一）</title><link>/article/85/</link><pubDate>Sun, 06 Dec 2020 11:14:01 +0000</pubDate><guid>/article/85/</guid><description>&lt;p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑 上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各 自的修改推送给对方，就可以互相看到对方的修改了。&lt;/p></description></item><item><title>Springboot对上传图片添加水印后存储到阿里云OSS对象存储中</title><link>/article/79/</link><pubDate>Sat, 05 Sep 2020 09:14:24 +0000</pubDate><guid>/article/79/</guid><description>&lt;p>好些时候没发表文章了，由于最近有点忙，又更兼&lt;code>qiucode&lt;/code>站点页面大改，新版页面也较旧版整洁多了！那具体该是如何实现呢？（言外之意无非就是程序怎么实现的），其实无非就是将&lt;code>MultipartFile&lt;/code>对象进行二次处理（这里所说的处理就是在上传的原图的基础上添加水印），二次处理好了的图片远程存储到阿里云oss存储对象中。&lt;/p></description></item><item><title>池塘中鱼的困惑</title><link>/article/118/</link><pubDate>Sun, 18 Aug 2019 20:43:15 +0000</pubDate><guid>/article/118/</guid><description>&lt;p>盛夏，多云，晌午时分。一群隐蔽于桥底下乘凉地鱼正往池边四处游来游去，从东边游到西边，游速不是很快，大家在游的过程，都在望着从池塘边路过的人，似乎在期待人们施舍食物。为什么这么说呢？且听当事鱼讲述这池塘的生活经历。&lt;/p></description></item><item><title>Java8四大核心内置函数式接口</title><link>/article/1/</link><pubDate>Sun, 23 Jun 2019 13:30:15 +0000</pubDate><guid>/article/1/</guid><description>&lt;p>在前面简单介绍了一些Lambda表达式得好处与语法，我们知道使用Lambda表达式是需要使用函数式接口得，那么，岂不是在我们开发过程中需要定义许多函数式接口，其实不然，java8其实已经为我们定义好了4类内置函数式接口，这4类接口其实已经可以解决我们开发过程中绝大部分的问题，只有一小部分比较特殊得情况需要我们自己去定义函数式接口，本文就简单来学习一下java8内置得4大核心函数式接口。&lt;/p></description></item><item><title>Java 8 函数式接口编程</title><link>/article/78/</link><pubDate>Sat, 22 Jun 2019 03:18:26 +0000</pubDate><guid>/article/78/</guid><description>&lt;p>Java8与2014年9月份发布的，经过多年市场体验，俨然已有很多开源框架和企业在使用Java8了。介于于此，也该回顾下Java8的新特性了，这样也便于后面看开源框架源码也不至于不知其新语法。&lt;/p></description></item><item><title> Extjs 3.3 tree以下的版本在IE10无法点击的解决办法</title><link>/article/114/</link><pubDate>Wed, 24 Apr 2019 21:06:11 +0000</pubDate><guid>/article/114/</guid><description>&lt;p>距上篇文章已过去好几天了，说好的一周发表1到3篇文章，难道都让狗吃了吗？现在才发布一篇而且还是转载的文章。好了，闲话少叙，切入正题，Extjs前端框架是比较早的前端mvc框架了，可能很多人都没接触过，而且现在也很少有项目用Extjs框架搭建了，原因是什么？那就不得而知了，有人说是Extjs比较重……&lt;/p></description></item><item><title>Ztree整合SpringMVC实现异步加载树</title><link>/article/116/</link><pubDate>Fri, 05 Apr 2019 19:17:36 +0000</pubDate><guid>/article/116/</guid><description>&lt;p>正值清明时节，天气也将开始升温了，夏天即将到来，你做好准备了吗？好了，废话少扯，切入正题，本文笔者将要讲解的是JQuery的树插件Ztree。现在web项目基本上也都是使用Ztree作为树组件进行实现的。&lt;/p></description></item><item><title>在npm上发布基于Vue2.x开发的UI组件库（记录篇）</title><link>/article/104/</link><pubDate>Mon, 25 Feb 2019 01:24:32 +0000</pubDate><guid>/article/104/</guid><description>&lt;p>解决Navicat12连接Oracle报oracle library is not loaded的提示问题基于Vue开发的UI组件库肯定是要公用的，虽然可以在每创建一个Vue项目时可以复制这些组件，如果组件比较大的情况下呢？是不是很不方便呢？&lt;/p></description></item><item><title>开发一套基于Vue2.x的UI组件库（环境搭建篇《一》）</title><link>/article/83/</link><pubDate>Sat, 16 Feb 2019 23:37:45 +0000</pubDate><guid>/article/83/</guid><description>&lt;p>基于Vue2.x开发的UI 组件库有很多，诸如 iView UI组件库、Element UI组件库 等等，既然有这么优秀的UI组件，我们干嘛非要自己开发一套组件呢？&lt;/p></description></item><item><title>这条路，看似很远，望不见的路的“尽头</title><link>/article/115/</link><pubDate>Wed, 06 Feb 2019 19:44:25 +0000</pubDate><guid>/article/115/</guid><description>&lt;p>今天天气很好，午后遂与家人去登山，天是那么的蓝，空气是那么的清新，虽然路是崎岖的，但笔者走的还是很开心的！&lt;/p></description></item><item><title>Nexus 2.14.x本地仓库安装与maven配置</title><link>/article/87/</link><pubDate>Sun, 20 Jan 2019 11:47:05 +0000</pubDate><guid>/article/87/</guid><description>&lt;p>Nexus私服是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。&lt;/p></description></item><item><title>MPVue开发微信小程序（一）</title><link>/article/84/</link><pubDate>Sun, 02 Dec 2018 11:17:26 +0000</pubDate><guid>/article/84/</guid><description>&lt;p>跟着笔者使用mpvue快速开发微信小程序，徐循渐进地开发微信小程序，使用html构建你想要的界面布局&lt;/p></description></item><item><title>双十一抢购云服务器，总有一款适合您</title><link>/article/82/</link><pubDate>Mon, 29 Oct 2018 23:26:20 +0000</pubDate><guid>/article/82/</guid><description>&lt;p>深夜发表文章，只为阿里云云服务器双十一搞活动，1核2G 云服务器 1年 84元。如果你错过了上次阿里云拼团的机会，那就在双十一这次拼团不要再错过了，这次拼团也是相对来说性价比也是比较优惠的！&lt;/p></description></item><item><title>ThinkPHP5.x入门（重拾知识篇）</title><link>/article/110/</link><pubDate>Sat, 27 Oct 2018 21:50:47 +0000</pubDate><guid>/article/110/</guid><description>&lt;p>由于这段时间可能会不怎么有空，但基本上每周写一篇吧！看到重拾知识篇就应该知道了吧！笔者肯定对PHP也是了解的，没错，是的，笔者是懂得PHP，那你是不是也跟笔者一样啊？是否也熟知PHP这门号称“世界上最好用的语言”呢？ 是不是曾几何时，有过从事PHP方面的工作呢？&lt;/p></description></item><item><title>CentOS 7安装Nginx反向代理服务器（云服务器篇）</title><link>/article/102/</link><pubDate>Sun, 21 Oct 2018 15:21:50 +0000</pubDate><guid>/article/102/</guid><description>&lt;p>距上一篇在CentOS 7 安装mysql也已经过去好几天了，正值云服务器试用结束之际，要把原在试用机的配置重新再新服务器安装一遍，在此借这个机会（也正值周日）记录一下Nginx反向代理服务器的配置。&lt;/p></description></item><item><title>cocos2d-x实现跑酷游戏之一（重拾知识篇）</title><link>/article/101/</link><pubDate>Thu, 11 Oct 2018 22:47:03 +0000</pubDate><guid>/article/101/</guid><description>&lt;p>好久没去关注cocos2d-x游戏引擎了！时隔多久，我是记不太清楚了，本篇属于温习知识吧，毕竟笔者最初的梦想是开发一个像现在大家平时没事就爱消磨时间的游戏，然而，事与愿违，没能成为一个游戏开发者，竟成了一个Java开发者（请允许我也可以在你们这些Java大佬面前自称为Java开发者）。&lt;/p></description></item><item><title>CentOS 7 安装mysql5.6 （云服务器篇）</title><link>/article/100/</link><pubDate>Sun, 07 Oct 2018 21:18:11 +0000</pubDate><guid>/article/100/</guid><description>&lt;p>无论是互联网行业，还是其他任何行业，数据对于一个公司来讲是至关重要的，也是企业维系用户的得以持续发展的重要资源！\n对于前两篇文章已经讲解了在CentOS 7如何安装JDK8 和Tomcat7，那么作为JavaWeb开发，显然数据库是必不可少的，至少目前来说是这样的。那好，那就跟笔者循序渐进地开始下去吧！&lt;/p></description></item><item><title>CentOS 7 安装 Tomcat 7（云服务器篇）</title><link>/article/98/</link><pubDate>Sun, 07 Oct 2018 16:26:14 +0000</pubDate><guid>/article/98/</guid><description>&lt;p>在前一篇介绍在CentOS 7如何安装 JDK，而这一篇可以说是开发Javaweb所需的web容器可选之一，如果你在浏览上一篇时已是得心应手了，相信你在CentOS 7安装Tomcat 已经不是什么事了！虽然有点傲慢，但还是可以窃喜的！&lt;/p></description></item><item><title>CentOS 7 安装JDK 8（云服务器篇）</title><link>/article/99/</link><pubDate>Sun, 07 Oct 2018 11:28:43 +0000</pubDate><guid>/article/99/</guid><description>&lt;p>云服务器Centos 7 如何安装JDK？这一篇文章你不容错过！它将介绍你在云服务器CentOS 7 如何安装JDK 8，图文并茂，通俗易懂，新手也能搭配！更何况你呢？如果你正在为如何在云服务器 CentOS 7 中如何安装JDK？那这篇文章再合适不过了！相信我，当你阅读完这篇文章后，云服务器CentOS 7 安装 JDK已不是什么触不可及了，让人望而却步了！&lt;/p></description></item><item><title>关于 本站点 的一些秘闻</title><link>/about/</link><pubDate>Sat, 06 Oct 2018 20:12:52 +0800</pubDate><guid>/about/</guid><description>关于博主 这该怎么介绍呢？按简介说是‘一个游离于山间之上的Java爱好者’，其实这样说也不为过， 的确是一个Java从业者。然这只是他爱好之一，</description></item><item><title>友情链接</title><link>/flinks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/flinks/</guid><description>如想交换本站友情链接，请在评论区留下你的站点信息，格式参考如下： - name: 秋码记录 desc: 一个游离于山间之上的Java爱好者 avatar: https://qiucode.cn/static/front/images/qiu-logo.png link: https://qiucode.cn</description></item></channel></rss>